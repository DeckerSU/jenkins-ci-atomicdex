diff --git a/configure.ac b/configure.ac
index ac0b70b..c768b30 100644
--- a/configure.ac
+++ b/configure.ac
@@ -24,69 +24,16 @@ esac
 AM_CONDITIONAL([IS_OSX], [test "x$is_osx" == "xyes"])
 AC_SUBST([LDPATH_VAR])
 
-AM_INIT_AUTOMAKE([foreign subdir-objects])
-LT_INIT([disable-static])
+# Require Automake 1.11.2 for AM_PROG_AR
+AM_INIT_AUTOMAKE([1.11.2 foreign subdir-objects])
 
 m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])
 
 AC_PROG_CC
-
-# Prefer the compilers native ar/ranlib if available
-# We have to manually loop to test these as autoconf inexplicably does
-# not provide an AC_PATH_TOOLS macro for this purpose.
-candidate_ars="ar"
-candidate_ranlibs="ranlib"
-# gcc bugs cause memory clearing to fail randomly. clang exhibits much more
-# consistent and sane behaviour so should be preferred going forward.
-enable_clear_tests="no"
-case $CC in
-*gcc*)
-    candidate_ars="gcc-ar ar"
-    candidate_ranlibs="gcc-ranlib ranlib"
-    ;;
-*clang*)
-    ver=$($CC --version | head -n 1 | cut -d' '  -f3 | cut -d'.' -f1)
-    candidate_ars="llvm-ar-$ver llvm-ar ar"
-    candidate_ranlibs="llvm-ranlib-$ver llvm-ranlib ranlib"
-    enable_clear_tests="yes"
-    ;;
-esac
-
-if test "x$is_osx" == "xyes"; then
-    candidate_ars="libtool $candidate_ars"
-    CCDIR=`dirname $CC`
-    if test x"$CCDIR" != x"."; then
-        if test -x $CCDIR/libtool; then
-            # Use libtool from the same directory as our clang
-            AR=$CCDIR/libtool
-            candidate_ars=""
-        fi
-    fi
-fi
-
-if test -n "$candidate_ars"; then
-    for candidate in $candidate_ars; do
-        AC_PATH_TOOL(AR, $candidate)
-        if test "x$HAVE_AR" == "xyes"; then
-            break
-        fi
-    done
-fi
-case $AR in
-*libtool)
-    ARFLAGS="-static -o"
-    AR_FLAGS="-static -o"
-    AC_SUBST([ARFLAGS])
-    AC_SUBST([AR_FLAGS])
-    ;;
-esac
-
-for candidate in $candidate_ranlibs; do
-    AC_PATH_TOOL(RANLIB, $candidate)
-    if test "x$HAVE_RANLIB" == "xyes"; then
-        break
-    fi
-done
+AM_PROG_AR
+#saved_cflags="$CFLAGS"
+LT_INIT([disable-static])
+#CFLAGS="$saved_cflags"
 
 AC_SUBST([AR])
 AC_SUBST([RANLIB])
@@ -192,11 +139,6 @@ if [[ "$CC" == *"clang"* ]]; then
 fi
 AC_SUBST([NOALIAS_CFLAGS])
 
-# Under OSX the compiler accepts this flag but the linker then fails.
-if test "x$is_osx" != "xyes"; then
-    AX_CHECK_COMPILE_FLAG([-Wl,--whole-archive], [whole_archive=yes])
-fi
-
 # SWIG versions vary in generated code quality; skip warnings
 SWIG_WARN_CFLAGS="-fno-strict-aliasing"
 AX_CHECK_COMPILE_FLAG([-Wno-shadow], [SWIG_WARN_CFLAGS="$SWIG_WARN_CFLAGS -Wno-shadow"])
@@ -263,18 +205,18 @@ fi
 #        target and so won't force all object files in the library to be
 #        included in ours - despite the fact that we are making a shared
 #        library and linking to a static one. This is broken and we work
-#        around it by hacking the whole-archive flags into the _LDADD variable
-#        for wallycore.
+#        around it by hacking the secp objects directly into the library
+#        via the _LDADD variable for wallycore.
+#        We previously achieved this by adding the libsecp256k1.a archive,
+#        but changes to libtool and apples linkers mean that
+#        archives-within-archives no longer work.
 #        Because automake tries to police its users very strictly and fails
 #        hard when flags are passed in this way, we have to substitute the
 #        flags here.
 #        Because libtool both intercepts -Wl and arbitrarily re-orders its
 #        command line inputs, we have to concoct a single expression to
 #        enforce linking that cannot be split, hence the below expression.
-LIBADD_SECP256K1="secp256k1/.libs/libsecp256k1.a"
-if test "x$whole_archive" == "xyes"; then
-    LIBADD_SECP256K1="-Wl,--whole-archive,secp256k1/.libs/libsecp256k1.a,--no-whole-archive"
-fi
+LIBADD_SECP256K1="-Wl,secp256k1/src/libsecp256k1_la-secp256k1.${OBJEXT}"
 AC_SUBST([LIBADD_SECP256K1])
 
 #
